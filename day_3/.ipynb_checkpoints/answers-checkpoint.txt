Answers to exercises 1-4 can be found in each notebook respectively, and summarized here. 

----------------------------------------------------------------

EXERCISE 1
# exercise_1.ipynb
# classroom.py

class Person:
    def __init__(self, firstname, lastname):
        self.firstname = firstname
        self.lastname = lastname
    
    def full_name(self):
        return f"{self.firstname} {self.lastname}"

class Student(Person):
    def __init__(self, firstname, lastname, subject):
        super().__init__(firstname, lastname)
        self.subject = subject
    
    def printNameSubject(self):
        print(f"{self.full_name()}, {self.subject}")

if __name__ == "__main__":
    me = Student('Hanna', 'Molin', 'Engineering')
    me.printNameSubject()


----------------------------------------------------------------

EXERCISE 2
# exercise_2.ipynb

import numpy as np

----------
a = np.zeros(10)
a[4] = 1
print(a)

----------
b = np.arange(10, 50)
print(b)

----------
c = np.arange(10)
print('Original vector is: ', c)
c_rev = c[::-1]
c_rev
print('Reversed vector is: ', c_rev)

----------
d = np.arange(9)
d = d.reshape(3,3)
print(d)

----------
e = np.array([1,2,0,0,4,0])
e_ind = e > 0
print(e_ind)

f = np.random.random((30))
f_mean = np.mean(f)
print(f_mean)

----------
g = np.zeros((4, 4),dtype=int)
g[0,:] = 1
g[-1,:] = 1
g[:,0] = 1
g[:,-1] = 1
print(g)

----------
h = np.zeros((8, 8),dtype=int)
h[1::2, ::2] = 1 
h[::2, 1::2] = 1
print(h)

----------
i = np.array([[0,1],[1,0]],dtype=int)
i = np.tile(i,(4,4))
print(i)

----------
j = np.arange(11)
j[3:9:1] = -j[3:9:1]
print(j)

----------
k = np.random.random(10)
k = np.sort(k)
print(k)

----------
A = np.random.randint(0,2,5)
B = np.random.randint(0,2,5)
equal = B == A
print(equal)

----------
m = np.arange(10, dtype=np.int32)
print(m.dtype)
print(m)
m = np.square(m)
print(m.dtype)
print(m)

----------
A = np.arange(9).reshape(3,3)
B = A + 1
C = np.dot(A,B)
D = np.diagonal(C)
print('C = ', C)
print('Diagonal = ', D)

----------------------------------------------------------------

EXERCISE 3
# exercise_3.ipynb
# matmult_improved.py

import numpy as np

def mat_mult(N):
    # Generate random matrices
    X = np.random.randint(0, 100, (N, N))
    Y = np.random.randint(0, 100, (N, N + 1))
    
    # Matrix multiplication
    result = np.dot(X, Y)
    return result

N = 250
result = mat_mult(N)
print(result)

----------------------------------------------------------------

EXERCISE 4
# exercise_4.ipynb
# mpi_ranks.py
# mpi_sum.py

----------------------------------------------------------------

EXERCISE 5

!nvidia-smi

Thu Mar 13 10:05:26 2025       
+-----------------------------------------------------------------------------------------+
| NVIDIA-SMI 550.54.15              Driver Version: 550.54.15      CUDA Version: 12.4     |
|-----------------------------------------+------------------------+----------------------+
| GPU  Name                 Persistence-M | Bus-Id          Disp.A | Volatile Uncorr. ECC |
| Fan  Temp   Perf          Pwr:Usage/Cap |           Memory-Usage | GPU-Util  Compute M. |
|                                         |                        |               MIG M. |
|=========================================+========================+======================|
|   0  Tesla T4                       Off |   00000000:00:04.0 Off |                    0 |
| N/A   44C    P8             10W /   70W |       0MiB /  15360MiB |      0%      Default |
|                                         |                        |                  N/A |
+-----------------------------------------+------------------------+----------------------+
                                                                                         
+-----------------------------------------------------------------------------------------+
| Processes:                                                                              |
|  GPU   GI   CI        PID   Type   Process name                              GPU Memory |
|        ID   ID                                                               Usage      |
|=========================================================================================|
|  No running processes found                                                             |
+-----------------------------------------------------------------------------------------+

a) Use %timeit to compare the time to do a 2D Fourier transform on arrays of size 128x128, 256x256, 512x512, 1024x1024 and 2048x2048, between numpy and cupy. At what sizes does cupy outperform?

import numpy as np
import cupy as cp 

i = [1,2,4,8,16] 

for n in i:

  array_np = np.random.rand(n*128,n*128)
  array_cp = cp.random.rand(n*128,n*128)

  time_np = %timeit -o np.fft.fft2(array_np)
  time_cp = %timeit -o cp.fft.fft2(array_cp)

  print('Size: ', array_np.shape,', Time numpy: ',time_np,', Time cupy: ',time_cp)

Size: (128, 128) 
Time numpy: 349 µs ± 89.4 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each) 
Time cupy: 70.7 µs ± 901 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)

Size: (256, 256)
Time numpy: 1.14 ms ± 215 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
Time cupy: 69.2 µs ± 370 ns per loop (mean ± std. dev. of 7 runs, 10000 loops each)

Size: (512, 512)
Time numpy: 7.96 ms ± 1.41 ms per loop (mean ± std. dev. of 7 runs, 100 loops each)
Time cupy: 251 µs ± 796 ns per loop (mean ± std. dev. of 7 runs, 1000 loops each)

Size: (1024, 1024)
Time numpy: 27.6 ms ± 775 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)
Time cupy: 1.08 ms ± 1.24 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)

Size: (2048, 2048)
Time numpy: 166 ms ± 22.8 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
Time cupy: 4.1 ms ± 21.7 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)

----------
ANSWER: cupy outperforms numpy from the start. 
----------

b) What happens now if you set the datatype of the array to numpy.float32?

i = [1,2,4,8,16] 

for n in i:

  array_np = np.random.rand(n*128,n*128).astype(np.float32)
  array_cp = cp.random.rand(n*128,n*128)

  time_np = %timeit -o np.fft.fft2(array_np)
  time_cp = %timeit -o cp.fft.fft2(array_cp)

  print('Size: ',array_np.shape,', Time numpy: ',time_np,', Time cupy: ',time_cp)

Size: (128, 128)
Time numpy: 224 µs ± 4.94 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
Time cupy: 71.2 µs ± 1.88 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)

Size: (256, 256)
Time numpy: 1.13 ms ± 264 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)
Time cupy: 79.3 µs ± 15.1 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)

Size: (512, 512)
Time numpy: 4.86 ms ± 50.8 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)
Time cupy: 251 µs ± 101 ns per loop (mean ± std. dev. of 7 runs, 1000 loops each)

Size: (1024, 1024)
Time numpy: 27.2 ms ± 604 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)
Time cupy: 1.08 ms ± 93.8 ns per loop (mean ± std. dev. of 7 runs, 1000 loops each)

Size: (2048, 2048)
Time numpy: 155 ms ± 15.7 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)
Time cupy: 4.16 ms ± 22.7 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)

----------
ANSWER: cupy outperforms numpy from the start. 
----------