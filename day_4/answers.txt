EXERCISE 1 - TEST

# exercise_1and2.ipynb
# test_simple_math.py

"""
A test of a collection of simple math operations
"""
import simple_math 
from simple_math import simple_add
from simple_math import simple_sub
from simple_math import simple_mult
from simple_math import simple_div
from simple_math import poly_first
from simple_math import poly_second
import pytest

def test_simple_add():
    assert simple_add(1,2) == 1+2

def test_simple_sub():
    assert simple_sub(1,2) == 1-2

def test_simple_mult():
    assert simple_mult(1,2) == 1*2

def test_simple_div():
    assert simple_div(1,2) == 1/2

def test_poly_first():
    assert poly_first(1, 2, 3) == 2 + 3*1

def test_poly_second():
    assert poly_second(1, 2, 3, 4) == 2 + 3*1 + 4*(1**2)

--------

!pytest test_simple_math.py

----------------------------------------------------

EXERCISE 2 - DOCUMENTING CODE
# exercise_1and2.ipynb
# simple_math.py 

"""
A collection of simple math operations:
- simple_add for addition of two numbers a and b
- simple_sub for subtraction of two numbers a and b
- simple_mult for multiplication of two numbers a and b
- simple_div for division of two numbers a and b
- poly_first for a first degree polynomial
- poly_second for a second degree polynomial
"""

def simple_add(a,b):
    """
    Calculating the sum of two numbers a and b.
    Parameters
    ----------
    a : integer
    First number to be added.
    -------
    b : integer
    Second number to be added.
    Examples
    --------
    >>> simple_math.simple_add(1,1)
    2
    >>> simple_math.simple_add(3,2) 
    5
    """
    return a+b

def simple_sub(a,b):
    """
    Subtracting number b from number a.
    Parameters
    ----------
    a : integer
    First number to be added.
    -------
    b : integer
    Second number to be subtracted.
    Examples
    --------
    >>> simple_math.simple_sub(1,1)
    0
    >>> simple_math.simple_sub(3,2) 
    1
    """    
    return a-b

def simple_mult(a,b):
    """
    Multiplying a with b.
    Parameters
    ----------
    a : integer
    First number.
    -------
    b : integer
    Second number.
    Examples
    --------
    >>> simple_math.simple_mult(1,1)
    1
    >>> simple_math.simple_mult(3,2) 
    6
    """
    return a*b

def simple_div(a,b):
    """
    Dividing a by b.
    Parameters
    ----------
    a : integer
    First number.
    -------
    b : integer
    Second number.
    Examples
    --------
    >>> simple_math.simple_div(1,1)
    1
    >>> simple_math.simple_div(3,2) 
    1.5
    """
    return a/b

def poly_first(x, a0, a1):
    """
    Evaluating a first degree polynomial y = a0 + a1*x.
    Parameters
    ----------
    a0 : integer
    Intercept.
    -------
    a1 : integer
    Gain.
    -------
    x : integer
    Point of evaluation. 
    Examples
    --------
    >>> simple_math.poly_first(1,1,1)
    2
    >>> simple_math.poly_first(3,2,1) 
    5
    """
    return a0 + a1*x

def poly_second(x, a0, a1, a2):
    """
    Evaluating a second degree polynomial y = a0 + a1*x + a2*(x^2).
    Parameters
    ----------
    a0 : integer
    Intercept.
    -------
    a1 : integer
    Parameter for first degree x.
    -------
    a1 : integer
    Parameter for second degree x^2.
    -------
    x : integer
    Point of evaluation. 
    Examples
    --------
    >>> simple_math.poly_first(1,1,1)
    2
    >>> simple_math.poly_first(3,2,1) 
    5
    """
    return poly_first(x, a0, a1) + a2*(x**2)

--------
import sphinx

!mkdir docs

!sphinx-quickstart --quiet --sep \
  --project "Simple math" \
  --author "Hanna Molin" \
  --release "0.1" \
  --extensions "sphinx.ext.autodoc" \
  --makefile --batchfile \
  docs

import shutil

shutil.rmtree('docs/source/.ipynb_checkpoints', ignore_errors=True)

!sphinx-apidoc -o docs/source . simple_math.py

!sphinx-build -b html docs/source docs/build

---------
Documentation saved in folder "docs". 

----------------------------------------------------

EXERCISE 3

# customized_plotting.ipynb
# my_fancy_plot.pdf

# exercise_3.ipynb
# my_custom_plot.pdf

import matplotlib.pyplot as plt
import sklearn.datasets as datasets
import numpy as np
import random

# Loading dataset
forest = datasets.fetch_covtype()

# Splitting dataset
forest_data = forest['data']
forest_target = forest['target']
forest_target_names = {'Spruce/Fir',  
                       'Lodgepole Pine', 
                       'Ponderosa Pine', 
                       'Cottonwood/Willow', 
                       'Aspen',  
                       'Douglas-fir', 
                       'Krummholz'}
forest_feature_names = forest['feature_names']

# Retain only the quantitative features and drop the qualitative, binary ones
forest_data_small = forest_data[:,[0,1,2,3,4,5,6,7,9]]
# Features:
    #'Elevation', 
    #'Aspect', 
    #'Slope', 
    #'Horizontal_Distance_To_Hydrology', 
    #'Vertical_Distance_To_Hydrology', 
    #'Horizontal_Distance_To_Roadways', 
    #'Hillshade_9am', 
    #'Hillshade_Noon', 
    #'Hillshade_3pm', 

# Randomly choose 1,000 points from the dataset
rand_rows = random.sample(list(range(forest_data.shape[0])), 500)
forest_data_small = forest_data_small[rand_rows,:]   
forest_target_small = forest_target[rand_rows] 
forest_feature_names_small = forest_feature_names[0:9]

feature1 = 1
feature2 = 7

x = forest_data_small[:,feature1]
y = forest_data_small[:,feature2]

fig, ax = plt.subplots()
scatter = ax.scatter(x,y, c=forest_target_small, alpha=0.4) 

ax.set_xlabel(forest_feature_names_small[feature1])
ax.set_ylabel(forest_feature_names_small[feature2]) 
ax.set_title('Forest cover type')

handles, _ = scatter.legend_elements(prop="colors", alpha=0.4)
legend1 = ax.legend(handles, forest_target_names, loc="lower right")
ax.add_artist(legend1)

ax.grid(True)
fig.tight_layout()

plt.show()

----------------------------------------------------

EXERCISE 4
# exercise_4.ipynb

import numpy as np
import matplotlib.pyplot as plt
from scipy import interpolate
import scipy.optimize as opt

exp = np.load('I_q_IPA_exp.npy')
mod = np.load('I_q_IPA_model.npy')

# For both arrays: [:,0] = scattering vector, [:,1] = scattering strenght

# Scale the points from the model to give the best possible fit to the experimental dataset
# Remove NaNs
exp = exp[~np.isnan(exp).any(axis=1)]

# Look at sizes and shapes
print('Experimental data \n Shape:',exp.shape, '\n Mean scattering vector: %.2f \n Std, scattering vector: %.2f \n Mean scattering strength: %.2f \n Std, scattering strength: %.2f ' %(np.mean(exp[:,0]),np.std(exp[:,0]),np.mean(exp[:,1]),np.std(exp[:,1])))
print('Modelled data \n Shape:',mod.shape, '\n Mean scattering vector: %.2f \n Std, scattering vector: %.2f \n Mean scattering strength: %.2f \n Std, scattering strength: %.2f ' %(np.mean(mod[:,0]),np.std(mod[:,0]),np.mean(mod[:,1]),np.std(mod[:,1])))

# Plot to visualize exp and mod data 
fig, ax = plt.subplots()
ax.scatter(exp[:,0],exp[:,1], alpha=0.4)
ax.scatter(mod[:,0],mod[:,1], alpha=0.4)
leg = ax.legend(['Experimental data','Model'], loc="upper right")
ax.add_artist(leg)
plt.show()

# Interpolate to create function based on experimental data
f = interpolate.interp1d(exp[:,0], exp[:,1], kind='linear', bounds_error=False, fill_value=0)

# Plot to visualize
fig, ax = plt.subplots()
ax.scatter(exp[:,0],exp[:,1], alpha=0.8, s=15)
ax.plot(exp[:,0],f(exp[:,0]), 'k-', linewidth=1)
leg = ax.legend(['Experimental data','Interpolation'], loc="upper right")
ax.add_artist(leg)
plt.show()

q_mod, I_mod = mod[:, 0], mod[:, 1]

# Define the objective function: minimize the difference between exp and mod
def objective(scale):
    I_mod_scaled = scale * I_mod # Scaled
    I_mod_interp = f(q_mod) # From interpolation with experimental data
    return np.sum((I_mod_scaled - I_mod_interp) ** 2)

# Optimize the scale factor
result = opt.minimize_scalar(objective)
best_scale = result.x

# Apply the best scale to the model
I_mod_scaled = best_scale * I_mod

# Plot to visualize
fig, ax = plt.subplots()
ax.scatter(exp[:,0],exp[:,1], alpha=0.8, s=15)
ax.plot(q_mod,I_mod_scaled, 'k-',linewidth=1)
leg = ax.legend(['Experimental data','Interpolation'], loc="upper right")
ax.add_artist(leg)
plt.show()

