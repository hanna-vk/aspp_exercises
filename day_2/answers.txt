EXERCISE 1 
See files in directory "animals"

class Mammals:
    def __init__(self):
        ''' Constructor for this class. '''
        # Create some member animals
        self.members = ['Tiger', 'Elephant', 'Wild Cat']
        
    def printMembers(self):
        print('Printing members of the Mammals class')
        for member in self.members:
            print('\t%s ' % member)

class Birds:
    def __init__(self):
        ''' Constructor for this class. '''
        # Create some member animals
        self.members = ['Sparrow', 'Robin', 'Duck']
    def printMembers(self):
        print('Printing members of the Birds class')
        for member in self.members:
            print('\t%s ' % member)

class Fish:
    def __init__(self):
        ''' Constructor for this class. '''
        # Create some member animals
        self.members = ['Pike', 'Perch', 'Salmon']
    def printMembers(self):
        print('Printing members of the Fish class')
        for member in self.members:
            print('\t%s ' % member)

-------------------------

import animals

m = animals.Mammals()
m.printMembers()

b = animals.Birds()
b.printMembers()

f = animals.Fish()
f.printMembers()

--------------------

import animals

harmless_birds = animals.harmless.Birds()
harmless_birds.printMembers()

dangerous_fish = animals.dangerous.Fish()
dangerous_fish.printMembers()

--------------------------------------------------------------------------------------

EXERCISE 2
See files in "Buggy"

Identified bugs:
# BUGS
# The counter resets from start each time - FIXED
# The numbers on the dice does not add up - FIXED
# Y/n in the end does not work - FIXED
# Check the last bit with the weird function - FIXED. utils.py not needed anymore.
# Removed unecessary def in die.py: - FIXED
        # def roll(dice):
        #    for die in dice:
        #        # XXX: I don't even know what this function does
        #        continue

--------------------------------------------------------------------------------------

EXERCISE 3
a. Investigate the performance of the matmult.py script. In which line(s) of the script would you start optimizing for speed?
A: 27 (matrix muliplication) and 9 and 4 (matrix creation) 

b. Investigate the performance of the euler72.py script In which line(s) of the script would you start optimizing for speed? (This is one problem from the euler project: https://projecteuler.net/problem=72)
A: fast_phi in line 50

c. Improve the performance of the matmult.py script. What is the best performance that you achieved with N=250?
A: Started with totalt time 8.846 seconds when using cProfile and the following results for the line profiling
    Total time: 0.576562 s
    File: matmult_prof.py
    Function: create at line 6
    
    Line #      Hits         Time  Per Hit   % Time  Line Contents
    ==============================================================
         6                                           @profile
         7                                           # NxN matrix
         8                                           def create(N):
         9         1          1.6      1.6      0.0    X = []
        10       251         99.2      0.4      0.0    for i in range(N):
        11       250     213670.9    854.7     37.1      X.append([random.randint(0,100) for r in range(N)])
        12                                               
        13                                             # Nx(N+1) matrix
        14         1          0.7      0.7      0.0    Y = []
        15       251        232.8      0.9      0.0    for i in range(N):
        16       250     360301.1   1441.2     62.5      Y.append([random.randint(0,100) for r in range(N+1)])
        17                                           
        18                                             # result is Nx(N+1)
        19         1          0.4      0.4      0.0    result = []
        20       251         94.6      0.4      0.0    for i in range(N):
        21       250       2158.8      8.6      0.4      result.append([0] * (N+1))
        22                                               
        23         1          1.3      1.3      0.0    return X, Y, result
    
    Total time: 15.2304 s
    File: matmult_prof.py
    Function: iterate at line 25
    
    Line #      Hits         Time  Per Hit   % Time  Line Contents
    ==============================================================
        25                                           @profile
        26                                           def iterate(X,Y,result):
        27                                             # iterate through rows of X
        28       251        136.8      0.5      0.0    for i in range(len(X)):
        29                                               # iterate through columns of Y
        30     63000      15082.5      0.2      0.1      for j in range(len(Y[0])):
        31                                                 # iterate through rows of Y
        32  15750250    4016113.8      0.3     26.4        for k in range(len(Y)):
        33  15687500   11199070.2      0.7     73.5          result[i][j] += X[i][k] * Y[k][j]
        34                                             
        35         1          0.8      0.8      0.0    return result


After improvements (using numpy), I achieved
    Total time: 0.029331 s
    File: matmult_improved.py
    Function: mat_mult at line 4
    
    Line #      Hits         Time  Per Hit   % Time  Line Contents
    ==============================================================
         4                                           @profile
         5                                           def mat_mult(N):
         6                                               # Generate random matrices
         7         1       1375.8   1375.8      4.7      X = np.random.randint(0, 100, (N, N))
         8         1       1264.7   1264.7      4.3      Y = np.random.randint(0, 100, (N, N + 1))
         9                                               
        10                                               # Matrix multiplication
        11         1      26689.7  26689.7     91.0      result = np.dot(X, Y)
        12         1          0.8      0.8      0.0      return result
